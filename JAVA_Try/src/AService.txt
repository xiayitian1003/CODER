/*
 * Copyright (C) 2013 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.transsion.deskclock.alarms;

import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.ContentResolver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.database.ContentObserver;
import android.os.Binder;
import android.os.Bundle;
import android.os.Handler;
import android.os.IBinder;
import android.os.RemoteException;
import android.provider.Settings;
import android.telephony.PhoneStateListener;
import android.telephony.TelephonyManager;
import android.util.Log;

import com.transsion.deskclock.AlarmAlertWakeLock;
import com.transsion.deskclock.AlarmClockFragment;
import com.transsion.deskclock.DeskClock;
import com.transsion.deskclock.LogUtils;
import com.transsion.deskclock.NotificationChannelManager;
import com.transsion.deskclock.gamemode.GameModeManager;
import com.transsion.deskclock.muslims.MuslimAlarmFragment;
import com.transsion.deskclock.muslims.mark_point.MarkedUtils;
import com.transsion.deskclock.R;
import com.transsion.deskclock.Utils;
import com.transsion.deskclock.data.DataModel;
import com.transsion.deskclock.events.Events;
import com.transsion.deskclock.provider.AlarmInstance;
import com.transsion.deskclock.uidata.UiDataModel;
import com.transsion.deskclock.utils.ReflectionUtils;

import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;

/**
 * This service is in charge of starting/stopping the alarm. It will bring up and manage the
 * {@link AlarmActivity} as well as {@link AlarmKlaxon}.
 *
 * Registers a broadcast receiver to listen for snooze/dismiss intents. The broadcast receiver
 * exits early if AlarmActivity is bound to prevent double-processing of the snooze/dismiss intents.
 */
public class AlarmService extends Service {
    /**
     * AlarmActivity and AlarmService (when unbound) listen for this broadcast intent
     * so that other applications can snooze the alarm (after ALARM_ALERT_ACTION and before
     * ALARM_DONE_ACTION).
     */
    public static final String ALARM_SNOOZE_ACTION = "com.android.deskclock.ALARM_SNOOZE";

    /**
     * AlarmActivity and AlarmService listen for this broadcast intent so that other
     * applications can dismiss the alarm (after ALARM_ALERT_ACTION and before ALARM_DONE_ACTION).
     */
    public static final String ALARM_DISMISS_ACTION = "com.android.deskclock.ALARM_DISMISS";

    /** A public action sent by AlarmService when the alarm has started. */
    public static final String ALARM_ALERT_ACTION = "com.android.deskclock.ALARM_ALERT";

    /** A public action sent by AlarmService when the alarm has stopped for any reason. */
    public static final String ALARM_DONE_ACTION = "com.android.deskclock.ALARM_DONE";

    /** Private action used to stop an alarm with this service. */
    public static final String STOP_ALARM_ACTION = "STOP_ALARM";

    /// M: [ALPS03269543] [Power off Alarm] Stop the alarm alert when the device shut down.
    public static final String PRE_SHUTDOWN_ACTION = "android.intent.action.ACTION_PRE_SHUTDOWN";

    /// M: [ALPS03269543] [Power off Alarm] Stop alarm alert when privacy protection lock enable
    public static final String PRIVACY_PROTECTION_CLOCK = "com.mediatek.ppl.NOTIFY_LOCK";

    /// M: [ALPS03269543] [Power off Alarm] start and stop deskclock play ringtone. @{
    private static final String NORMAL_SHUTDOWN_ACTION = "android.intent.action.normal.shutdown";
    private static final String ALARM_REQUEST_SHUTDOWN_ACTION =
      "mediatek.intent.action.ACTION_ALARM_REQUEST_SHUTDOWN";
    public static boolean  mStopPlayReceiverRegistered = false;


    /** Binder given to AlarmActivity. */
    private final IBinder mBinder = new Binder();

    /** Whether the service is currently bound to AlarmActivity */
    private boolean mIsBound = false;

    /** Listener for changes in phone state. */
    private final PhoneStateChangeListener mPhoneStateListener = new PhoneStateChangeListener();

    /** Whether the receiver is currently registered */
    private boolean mIsRegistered = false;

    private static final long IGNORE_ALARM_TIME = 10 * 60 * 1000;

    @Override
    public IBinder onBind(Intent intent) {
        mIsBound = true;
        return mBinder;
    }

    @Override
    public boolean onUnbind(Intent intent) {
        mIsBound = false;
        return super.onUnbind(intent);
    }

    /**
     * Utility method to help stop an alarm properly. Nothing will happen, if alarm is not firing
     * or using a different instance.
     *
     * @param context application context
     * @param instance you are trying to stop
     */
    public static void stopAlarm(Context context, AlarmInstance instance) {
        final Intent intent = AlarmInstance.createIntent(context, AlarmService.class, instance.mId)
                .setAction(STOP_ALARM_ACTION);

        // We don't need a wake lock here, since we are trying to kill an alarm
        context.startService(intent);
    }

    private TelephonyManager mTelephonyManager;

    /// M: [ALPS03269543] [Power off Alarm]
    private AlarmInstance mCurrentAlarm = null;
    private Context mContext = null;
    /// @}

    private AlarmInstance mInstance = null;
    private AlarmInstance mInstanceAlarm = null;
    private int mInitialCallState;


    private void startAlarm(AlarmInstance instance) {
        LogUtils.v("AlarmService.start with instance: " + instance.mId);
        boolean isStopCurrent = false;
        if (mCurrentAlarm != null) {
            /*itel begin, fix bug that the second alarm ring when add three alarm_bubiao.xie_2019-08-16*/
            if (isSameTime(mCurrentAlarm, instance) && instance.mId > mCurrentAlarm.mId) {
                AlarmStateManager.setMissedState(this, instance);
                return;
            } else {
                AlarmStateManager.setMissedState(this, mCurrentAlarm);
                stopCurrentAlarm();
                isStopCurrent = true;
            }
            /*itel end.*/
        }

        AlarmAlertWakeLock.acquireCpuWakeLock(this);

        mCurrentAlarm = instance;

        /*itel begin, delay 100ms when stopCurrentAlarm_bubiao.xie_2019-03-11*/
        if (isStopCurrent) {
            new Handler().postDelayed(new Runnable() {
                public void run() {
                    AlarmNotifications.showAlarmNotification(AlarmService.this, mCurrentAlarm, NotificationChannelManager.Channel.EVENT_EXPIRED);
                }
            }, 100);
        } else {
            AlarmNotifications.showAlarmNotification(this, mCurrentAlarm, NotificationChannelManager.Channel.EVENT_EXPIRED);
        }
        /*itel end*/
        mTelephonyManager.listen(mPhoneStateListener.init(), PhoneStateListener.LISTEN_CALL_STATE);
        /*transsion begin, modify don't start alarm when calling wenwei.zhou 20180124*/
        mInitialCallState = mTelephonyManager.getCallState();
        boolean inCall = mInitialCallState != TelephonyManager.CALL_STATE_IDLE;
        Map<String, Object> map = new HashMap<>();
        map.put("ring", DataModel.getDataModel().getRingtoneTitle(mCurrentAlarm.getRingtone()));
        map.put("tag", mCurrentAlarm.getLabelOrDefault(mContext));
        Bundle bundle = new Bundle();
        bundle.putString("ring", DataModel.getDataModel().getRingtoneTitle(mCurrentAlarm.getRingtone()));
        bundle.putString("tag", mCurrentAlarm.getLabelOrDefault(mContext));
        if (instance.mIsMuslimsAlarm) {
            MarkedUtils.marked("muslim_clock_pv", 883460000054L);
        } else {
            MarkedUtils.marked("clock_00009", 883460000011L,bundle);
        }
        /*itel begin, show notification in the drop-down drawer_bubiao.xie_2018-10-31*/
        /*if (inCall) {
            mInstanceAlarm = mCurrentAlarm;
            AlarmNotifications.showAlarmNotification(this, mCurrentAlarm, NotificationChannelManager.Channel.DEFAULT_NOTIFICATION);
            //AlarmNotifications.updateAlarmNotification(this, mCurrentAlarm);
        } else {*/
            AlarmNotifications.showAlarmNotification(this, mCurrentAlarm, NotificationChannelManager.Channel.EVENT_EXPIRED);
        //}
        /*itel end*/
        AlarmKlaxon.start(this, mCurrentAlarm,inCall);
        /*transsion end wenwei.zhou 20180124*/
        sendBroadcast(new Intent(ALARM_ALERT_ACTION));
    }

    /*transsion begin, modify don't start alarm when calling wenwei.zhou 20180124*/
    /**
     * Utility method to help start alarm properly. If alarm is already firing, it
     * will mark it as missed and start the new one.
     *
     * @param context application context
     * @param instance to trigger alarm
     */
    private static void startAlarm(Context context, AlarmInstance instance) {
        final Intent intent = AlarmInstance.createIntent(context, AlarmService.class, instance.mId)
                .setAction(AlarmStateManager.CHANGE_STATE_ACTION);

        // Maintain a cpu wake lock until the service can get it
        AlarmAlertWakeLock.acquireCpuWakeLock(context);
        context.startService(intent);
    }
    /*transsion end wenwei.zhou 20180124*/

    private void stopCurrentAlarm() {
        if (mCurrentAlarm == null) {
            LogUtils.v("There is no current alarm to stop");
            return;
        }

        final long instanceId = mCurrentAlarm.mId;
        LogUtils.v("AlarmService.stop with instance: %s", instanceId);

        AlarmKlaxon.stop(this);
        mTelephonyManager.listen(mPhoneStateListener, PhoneStateListener.LISTEN_NONE);
        sendBroadcast(new Intent(ALARM_DONE_ACTION));

        stopForeground(true /* removeNotification */);

        mCurrentAlarm = null;
        AlarmAlertWakeLock.releaseCpuLock();
    }

    private final BroadcastReceiver mActionsReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            final String action = intent.getAction();
            LogUtils.i("AlarmService received intent %s", action);
            if (mCurrentAlarm == null || mCurrentAlarm.mAlarmState != AlarmInstance.FIRED_STATE) {
                LogUtils.i("No valid firing alarm");
                return;
            }

//            if (mIsBound) {
//                LogUtils.i("AlarmActivity bound; AlarmService no-op");
//                return;
//            }

            switch (action) {
                case ALARM_SNOOZE_ACTION:
                    // Set the alarm state to snoozed.
                    // If this broadcast receiver is handling the snooze intent then AlarmActivity
                    // must not be showing, so always show snooze toast.
                    AlarmStateManager.setSnoozeState(context, mCurrentAlarm, true /* showToast */);
                    Events.sendAlarmEvent(R.string.action_snooze, R.string.label_intent);
                    break;
                case ALARM_DISMISS_ACTION:
                    // Set the alarm state to dismissed.
                    MarkedUtils.marked("clock_00010", 883460000012L);
                    AlarmStateManager.deleteInstanceAndUpdateParent(context, mCurrentAlarm);
                    Events.sendAlarmEvent(R.string.action_dismiss, R.string.label_intent);
                    //A: delete alarm-window in gamemode by fingerprint. yitian.xia. 2021/9/27 @{
                    boolean gameMode = Utils.getGameModeState(AlarmService.this);
                    if(gameMode) {
                        LogUtils.d("GameMode delete the FloatWindow");
                        GameModeManager.getInstance(context.getApplicationContext()).closeFloatWindow();
                    }
                    //@}
                    break;
            }
        }
    };

    /*transsion begin, fix bug that Shutdown and alarm clock ring at the same time, bubiao.xie, 2018.07.31*/
    private BroadcastReceiver mShutdownReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            LogUtils.d("Action : " + intent.getAction());
            if (intent.getAction().equals(Intent.ACTION_SHUTDOWN)) {
                AlarmStateManager.deleteInstanceAndUpdateParent(context, mCurrentAlarm);
            }
        }
    };
    /*transsion end*/

    @Override
    public void onCreate() {
        super.onCreate();
        Log.d("AlarmService", "onCreate: ");
        mTelephonyManager = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);

        // Register the broadcast receiver
        final IntentFilter filter = new IntentFilter(ALARM_SNOOZE_ACTION);
        filter.addAction(ALARM_DISMISS_ACTION);
        registerReceiver(mActionsReceiver, filter);
        /*transsion begin, fix bug that Shutdown and alarm clock ring at the same time, bubiao.xie, 2018.07.31*/
        final IntentFilter filter1 = new IntentFilter(Intent.ACTION_SHUTDOWN);
        registerReceiver(mShutdownReceiver,filter1);
        /*transsion end*/
        mIsRegistered = true;
        /// M: [ALPS03269543] [Power off Alarm]
        mContext = this;
        /// @}
        getContentResolver().registerContentObserver(Settings.Secure.getUriFor(KEY_POWER_SAVING_MODE), false ,mPowerSaveObserver);
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        LogUtils.i("AlarmService.onStartCommand() with %s", intent);
        if (intent == null) {
            return Service.START_NOT_STICKY;
        }

        long instanceId = -1;
        /// M: [ALPS03269543] [Power off Alarm] check if it's boot from power off alarm or not
        IntentFilter filter = new IntentFilter();
        /// M: [ALPS03269543] [Power off Alarm] add for Clock to dismiss alarm when preShutDown
            filter.addAction(PRE_SHUTDOWN_ACTION);
        /// M: [ALPS03269543] [Power off Alarm] add for privacy protection lock
            filter.addAction(PRIVACY_PROTECTION_CLOCK);
        registerReceiver(mStopPlayReceiver, filter);
        mStopPlayReceiverRegistered = true;
        instanceId = AlarmInstance.getId(intent.getData());

        switch (intent.getAction()) {
            case AlarmStateManager.CHANGE_STATE_ACTION:
                AlarmStateManager.handleIntent(this, intent);
                    // If state is changed to firing, actually fire the alarm!
                    final int alarmState = intent.getIntExtra(
                        AlarmStateManager.ALARM_STATE_EXTRA, -1);
                    if (alarmState == AlarmInstance.FIRED_STATE) {
                        final ContentResolver cr = this.getContentResolver();
                        mInstance = AlarmInstance.getInstance(cr, instanceId);
                    }
                LogUtils.v("AlarmService instance[%s]", mInstance);
                    if (mInstance == null) {
                        LogUtils.e("No instance found to start alarm: %d", instanceId);
                        if (mCurrentAlarm != null) {
                            // Only release lock if we are not firing alarm
                            AlarmAlertWakeLock.releaseCpuLock();
                        }
                        break;
                    }

                    if (mCurrentAlarm != null && mCurrentAlarm.mId == mInstance.mId) {
                        LogUtils.e("Alarm already started for instance: %d", instanceId);
                        break;
                    }
                    long currentTime = Calendar.getInstance().getTimeInMillis();
                    if (currentTime - mInstance.getAlarmTime().getTimeInMillis() > IGNORE_ALARM_TIME) {
                        LogUtils.i("this alarm should be ignored");
                        break;
                    }
                startAlarm(mInstance);
                break;
            /*transsion begin, fix that click upcoming alarm to not enter the alarm page, bubiao.xie,2018.06.08*/
            case AlarmNotifications.ACTION_VIEW_ALARM:
                if (intent.getBooleanExtra(MuslimAlarmFragment.SWITCH_TO_MUSLIMS_ALARM_INTENT_EXTRA, false)){
                    UiDataModel.getUiDataModel().setSelectedTab(UiDataModel.Tab.MUSLIMS);
                } else {
                    UiDataModel.getUiDataModel().setSelectedTab(UiDataModel.Tab.ALARMS);
                }
                long alarmId = intent.getLongExtra(AlarmClockFragment.SCROLL_TO_ALARM_INTENT_EXTRA, 0);
                final Intent showAlarm = new Intent(this, DeskClock.class);
                showAlarm.putExtra(AlarmClockFragment.SCROLL_TO_ALARM_INTENT_EXTRA, alarmId);
                showAlarm.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                startActivity(showAlarm);
                break;
            /*transsion end*/
            case STOP_ALARM_ACTION:
                if (mCurrentAlarm != null && mCurrentAlarm.mId != instanceId) {
                    LogUtils.e("Can't stop alarm for instance: %d because current alarm is: %d",
                            instanceId, mCurrentAlarm.mId);
                    break;
                }
                stopCurrentAlarm();
                stopSelf();
        }

        if (Utils.isMediaTekPlatform() && isPplLock()) {
            if (mCurrentAlarm != null) {
                AlarmStateManager.deleteInstanceAndUpdateParent(mContext, mCurrentAlarm);
                LogUtils.v("AlarmService, PPL already locked before.");
            }
        }
        return Service.START_NOT_STICKY;
    }

    //MediaTek begin
    private boolean isPplLock() {
        boolean isPplLocked = false;
        //M: Remove system JAR package dependencies. by mingying.chen 2021/11/25. @{
//        try {
//            IPplAgent agent = IPplAgent.getService();
//            if (agent != null) {
//                isPplLocked = agent.needLock() == 1;
//            }
//        } catch (RemoteException e) {
//            LogUtils.v("AlarmService, isPplLock, RemoteException");
//        } catch (NoSuchElementException e) {
//            LogUtils.v("AlarmService, isPplLock, NoSuchElementException");
//        }
        isPplLocked = ReflectionUtils.needLock() == 1;
        //@}
        return isPplLocked;
    }
    //end

    /*itel begin, fix bug that the second alarm ring when add three alarm_bubiao.xie_2018-08-07*/
    private boolean isSameTime(AlarmInstance a1, AlarmInstance a2) {
        if (a1.getAlarmTime().get(Calendar.HOUR_OF_DAY) == a2.getAlarmTime().get(Calendar.HOUR_OF_DAY)
                && a1.getAlarmTime().get(Calendar.MINUTE) == a2.getAlarmTime().get(Calendar.MINUTE)) {
            return true;
        } else {
            return false;
        }
    }
    /*itel end.*/

    @Override
    public void onDestroy() {
        LogUtils.v("AlarmService.onDestroy() called");
        /// M: [ALPS03269543] [Power off Alarm] Ordering corrected,
        ///onDestroy should be the last method being called
        //super.onDestroy();
        if (mCurrentAlarm != null) {
            stopCurrentAlarm();
        }
        /// M: [ALPS03269543] [Power off Alarm] unregister the power off alarm
        ///snooze\dismiss\power_on receiver @{
        if(mStopPlayReceiverRegistered){
            unregisterReceiver(mStopPlayReceiver);
            mStopPlayReceiverRegistered = false;
         }
        /// @}

        if (mIsRegistered) {
            unregisterReceiver(mActionsReceiver);
            unregisterReceiver(mShutdownReceiver);
            mIsRegistered = false;
        }
        getContentResolver().unregisterContentObserver(mPowerSaveObserver);
        super.onDestroy();
    }

    private final class PhoneStateChangeListener extends PhoneStateListener {

        private int mPhoneCallState;

        PhoneStateChangeListener init() {
            mPhoneCallState = -1;
            return this;
        }

        @Override
        public void onCallStateChanged(int state, String ignored) {
            if (mPhoneCallState == -1) {
                mPhoneCallState = state;
            }

            if (state != TelephonyManager.CALL_STATE_IDLE && state != mPhoneCallState) {
                startService(AlarmStateManager.createStateChangeIntent(AlarmService.this,
                        "AlarmService", mCurrentAlarm, AlarmInstance.MISSED_STATE));
            }

            /*transsion begin, modify don't start alarm when calling wenwei.zhou 20180124*/
            /// M: If the state change to CALL_STATE_IDLE, it means the user havn't in the call @{
            int newPhoneState = mTelephonyManager.getCallState();
            LogUtils.v("AlarmService onCallStateChanged state = " + state
                    + " ,newState: " + newPhoneState + " ,initState = " + mInitialCallState);
            if (newPhoneState == TelephonyManager.CALL_STATE_IDLE
                    && state == TelephonyManager.CALL_STATE_IDLE && state != mInitialCallState) {
                /// M: If the alarm has been dismissed by user, shouldn't restart the alarm
                if (null != mInstanceAlarm
                        && mInstanceAlarm.mAlarmState == AlarmInstance.FIRED_STATE) {
                    LogUtils.v("AlarmService AlarmFiredState startAlarm");
                    /*itel begin, start alarm with a delay of 300 milliseconds_bubiao.xie_2019-06-05 */
                    /*itel begin, start alarm with a delay of 600 milliseconds_bubiao.xie_2019-06-20 */
                    /*new Handler().postDelayed(new Runnable() {
                        @Override
                        public void run() {
                            mCurrentAlarm = null;
                            startAlarm(mContext, mInstanceAlarm);
                            mInitialCallState = TelephonyManager.CALL_STATE_IDLE;
                        }
                    }, 600);*/
                    /*itel end*/
                }

                /*transsion begin, resolve no play ringtone after stop call for Bug OSQDLREL-3283, jiajia.yang_2020-06-22*/
                AlarmKlaxon.start(AlarmService.this, mCurrentAlarm,false);
                /*transsion end.*/
            }
            /// @}
            /*transsion end wenwei.zhou 20180124*/

        }
    }

    /// M: [ALPS03269543] [Power off Alarm] Stop/snooze receiver @ {
    private final BroadcastReceiver mStopPlayReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            LogUtils.v("AlarmService mStopPlayReceiver: " + intent.getAction());
            if (mCurrentAlarm == null) {
                LogUtils.v("mStopPlayReceiver mCurrentAlarm is null, just return");
                return;
            }
                /// M: [ALPS03269543, ALPS02673782] [Power off Alarm] Power on action
                /// or pre_shutdown, so set dismiss state and don't shut down
                AlarmStateManager.deleteInstanceAndUpdateParent(context, mCurrentAlarm);
        }
    };

    private static final String KEY_POWER_SAVING_MODE = "super_power_saving_mode";
    private boolean isPowerSavingMode() {
        return Settings.Secure.getInt(getContentResolver(), KEY_POWER_SAVING_MODE, 0) == 1;
    }

    private ContentObserver mPowerSaveObserver = new ContentObserver(null) {
        @Override
        public void onChange(boolean value) {
            super.onChange(value);
            if (isPowerSavingMode()) {
                /*if (mCurrentAlarm != null) {
                    AlarmStateManager.setMissedState(AlarmService.this, mCurrentAlarm);
                }*/
                stopCurrentAlarm();
            }
        }
    };
}
